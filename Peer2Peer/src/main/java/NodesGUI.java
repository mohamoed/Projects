
import java.util.LinkedList;
import javax.swing.DefaultListModel;

public class NodesGUI extends javax.swing.JFrame {
    private Node node;
    private int nodeId; // Store the Node ID
    private javax.swing.JList<String> NodesList;
    private LinkedList<NodeInfo> otherNodes;

    public NodesGUI() {
        initComponents();
    }

    // Constructor with node, nodeId, and otherNodes list
    public NodesGUI(Node node, int nodeId, LinkedList<NodeInfo> otherNodes) {
        this.node = node;
        this.nodeId = nodeId;
        this.otherNodes = otherNodes;
        initComponents();
        NodesList = new javax.swing.JList<>();
        setTitle("Node " + nodeId); // Set the title to "Node" + nodeId
        TitleCount.setText(Integer.toString(nodeId));

        // Populate the list of available nodes excluding the current node
        DefaultListModel<String> model = new DefaultListModel<>();
        for (NodeInfo nodeInfo : otherNodes) {
            if (nodeInfo.getId() != nodeId) {
                model.addElement("Node " + nodeInfo.getId());
            }
        }
        SendToList.setModel(model);

        DefaultListModel<String> model1 = new DefaultListModel<>();
        model1.addElement("public"); // Add the "public" option
        for (NodeInfo nodeInfo : otherNodes) {
            if (nodeInfo.getId() != nodeId) {
                model1.addElement("Node " + nodeInfo.getId());
            }
        }
        SendToList.setModel(model1);
    }

    // Constructor with node, nodeId, and otherNodes list

    public NodesGUI(Node node, LinkedList<NodeInfo> otherNodes) {

        this.node = node;
        initComponents();
        NodesList = new javax.swing.JList<>();
        DefaultListModel<String> model = new DefaultListModel<>();
        for (NodeInfo nodeInfo : otherNodes) {
            model.addElement("Node " + nodeInfo.getId());
        }
        SendToList.setModel(model);

        // Pass the NodesGUI instance to the Node constructor
        this.node = new Node(node.getPort(), node.getSuccessor(), Chat, this);

    }

    public void appendMessageToChat(String message) {
        Chat.append(message + "\n");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        NodeGUItitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Chat = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        SendToList = new javax.swing.JList<>();
        SendButton = new javax.swing.JButton();
        TitleCount = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        NodeGUItitle.setFont(new java.awt.Font("Lucida Sans", 1, 20)); // NOI18N
        NodeGUItitle.setText("Node ");

        Chat.setEditable(false);
        Chat.setColumns(20);
        Chat.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        Chat.setRows(5);
        jScrollPane1.setViewportView(Chat);

        SendToList.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        SendToList.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        SendToList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Node 1", " " };

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        jScrollPane2.setViewportView(SendToList);

        SendButton.setBackground(new java.awt.Color(255, 204, 204));
        SendButton.setFont(new java.awt.Font("Arial Black", 1, 20)); // NOI18N
        SendButton.setText("Send");
        SendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendButtonActionPerformed(evt);
            }
        });

        TitleCount.setFont(new java.awt.Font("Lucida Sans", 1, 20)); // NOI18N
        TitleCount.setText("1");

        jTextField1.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        jTextField1.setToolTipText("");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {

            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1)
                                        .addComponent(jTextField1)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 115,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(38, 38, 38)
                                                .addComponent(SendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 182,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 155, Short.MAX_VALUE)))
                                .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(NodeGUItitle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TitleCount)
                                .addGap(209, 209, 209)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(NodeGUItitle)
                                        .addComponent(TitleCount))
                                .addGap(12, 12, 12)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 125,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(SendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(7, Short.MAX_VALUE)));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SendButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_SendButtonActionPerformed
        String selectedNodeString = SendToList.getSelectedValue();
        if (selectedNodeString != null) {
            if (selectedNodeString.equals("public")) {
                // Send a public message
                String messageContent = jTextField1.getText();
                int senderNodeId = Integer.parseInt(TitleCount.getText().replaceAll(" ", ""));
                String fullMessage = senderNodeId + ": " + messageContent + " (public)";
                // message reciever you chose recive mesaage (readObject)
                // append message textarea bta3to
                Message message = new Message(fullMessage, true);
                int selected = SendToList.getSelectedIndex();
                node.sendMessage(message, otherNodes.get(selected).getPort());

                // Append the message to the chat area
                appendMessageToChat(fullMessage);
                node.recievemessage(message);
            } else if (selectedNodeString.startsWith("Node")) {
                // Extract the node ID from the selected node string
                String[] parts = selectedNodeString.split(" ");
                if (parts.length >= 2) {
                    int selectedNodeId = Integer.parseInt(parts[1]);

                    // Get the message content from the text field
                    String messageContent = jTextField1.getText();

                    // Get the sender node ID from the title of the NodesGUI window
                    int senderNodeId = Integer.parseInt(TitleCount.getText().replaceAll(" ", ""));

                    // Construct the message content with sender node ID
                    String fullMessage = senderNodeId + ": " + messageContent;

                    // Get the selected node from the list of otherNodes
                    NodeInfo selectedNodeInfo = null;
                    for (NodeInfo nodeInfo : otherNodes) {
                        if (nodeInfo.getId() == selectedNodeId) {
                            selectedNodeInfo = nodeInfo;
                            break;
                        }
                    }

                    // Create and send the message to the selected node
                    if (selectedNodeInfo != null && selectedNodeInfo.getNode() != null) {
                        // Here, we need to specify the node to send the message to
                        // The selectedNodeInfo.getNode() represents the recipient node
                        Message message = new Message(fullMessage, false, selectedNodeInfo.getNode());
                        node.sendMessage(message, node.getPort());

                        // Append the message to the chat area
                        appendMessageToChat(fullMessage);
                    } else {
                        System.out.println("Selected node not found or node is null.");
                    }
                } else {
                    System.out.println("Invalid node selection format.");
                }
            } else {
                System.out.println("Invalid option selected.");
            }
        } else {
            System.out.println("No option selected.");
        }
    }// GEN-LAST:event_SendButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NodesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NodesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NodesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NodesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NodesGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Chat;
    private javax.swing.JLabel NodeGUItitle;
    private javax.swing.JButton SendButton;
    private javax.swing.JList<String> SendToList;
    private javax.swing.JLabel TitleCount;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}
